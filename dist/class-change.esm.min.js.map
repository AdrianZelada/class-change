{"version":3,"file":"class-change.esm.min.js","sources":["../src/util.js","../src/add.js","../src/remove.js","../src/toggle.js","../src/attrs.js","../src/listener.js","../src/index.js"],"sourcesContent":["// Exports\n// =============================================================================\n/**\n * Converts space-separates list of class names to an array (if necessary) then\n * trims each array item.\n *\n * @export\n * @param {(array|string)} classNames\n * @returns {array}\n */\nexport function classNamesToArray(classNames) {\n    // String - Trim and convert to Array\n    if (typeof classNames === 'string') {\n        classNames = classNames.trim().replace(/\\s+/g, ' ').split(' ');\n    }\n\n    if (Array.isArray(classNames)) {\n        // Trim items\n        classNames = classNames.map(name => name && name.length ? name.trim() : null);\n\n        // Filter out \"falsey\" values\n        classNames = classNames.filter(Boolean);\n    }\n\n    return classNames;\n}\n\n/**\n * Converts a CSS selector (string), Element, HTMLCollection or NodeList to an\n * array (returns array as-is).\n * - Array: [Element, Element, ...]\n * - Element: document.body\n * - HTMLCollection: document.getElementsByTagName('p')\n * - NodeList: document.querySelectorAll('p')\n * - String (CSS selector): 'p'\n *\n * @export\n * @param {(array|element|htmlcollection|nodelist|string)} elements\n * @param {boolean} [removeDuplicates=true]\n * @returns {array}\n */\nexport function elementsToArray(elements) {\n    // CSS Selector\n    if (typeof elements === 'string') {\n        elements = Array.apply(null, document.querySelectorAll(elements));\n    }\n    // HTMLCollection / NodeList\n    else if (elements instanceof window.HTMLCollection || elements instanceof window.NodeList) {\n        elements = Array.apply(null, elements);\n    }\n    // Node/Element (assumed)\n    else if (elements && !Array.isArray(elements)) {\n        elements = [elements];\n    }\n\n    if (Array.isArray(elements)) {\n        // Remove duplicate\n        return elements.filter((value, index, self) => self.indexOf(value) === index);\n    }\n    else {\n        return [];\n    }\n}\n\n/**\n * Matches self or finds closest ancestor (excluding document) node that match a\n * CSS selector\n *\n * @export\n * @param {element} elm\n * @param {sting} matchSelector\n * @returns {array}\n */\nexport function getClosest(elm, matchSelector) {\n    /* istanbul ignore next */\n    const matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n\n    let matchedElm = null;\n    let testElm    = elm;\n\n    while (testElm && testElm !== document) {\n        if (matches.call(testElm, matchSelector)) {\n            matchedElm = testElm;\n            break;\n        }\n\n        testElm = testElm.parentNode;\n    }\n\n    return matchedElm;\n}\n\n/**\n * Finds all parent nodes (excluding document), optionally limited to only those\n * that match a CSS selector\n *\n * @export\n * @param {element} elm\n * @param {sting} matchSelector\n * @returns {array}\n */\nexport function getParents(elm, matchSelector) {\n    /* istanbul ignore next */\n    const matches    = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    const parentElms = [];\n\n    let testElm = elm.parentNode;\n\n    while (testElm && testElm !== document) {\n        if (!matchSelector || matchSelector && matches.call(testElm, matchSelector)) {\n            parentElms.push(testElm);\n        }\n\n        testElm = testElm.parentNode;\n    }\n\n    return parentElms;\n}\n\n/**\n * Cross-browser wrapper for native \"matches\" method\n *\n * @export\n * @param {element} elm\n * @param {string} selector\n * @returns {boolean}\n */\nexport function matchesSelector(elm, selector) {\n    /* istanbul ignore next */\n    const matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n\n    return matches.call(elm, selector);\n}\n","// Modules\n// =============================================================================\nimport { elementsToArray, classNamesToArray } from './util.js';\n\n\n// Functions\n// =============================================================================\n/**\n * Add class name(s) to target element(s)\n *\n * @param {(array|element|htmlcollection|nodelist|string)} target -\n *   Element(s) to add class name(s) to\n * @param {(array|function|string)} classNames - Array, space-separated list,\n *  or function that returns array/string of class name(s)\n * @returns {(array|element)} - Target(s)\n */\nfunction addClass(target, classNames) {\n    const elms = elementsToArray(target);\n\n    elms.forEach(function(elm, i) {\n        const classArray = classNamesToArray(classNames instanceof Function ? classNames(elm, i) : classNames);\n\n        if (classArray && classArray.length) {\n            const elmClassArray   = elm.className.length ? elm.className.split(' ') : [];\n            const newClassArray   = classArray.filter(className => elmClassArray.indexOf(className) === -1);\n            const finalClassArray = elmClassArray.concat(newClassArray);\n\n            elm.className = finalClassArray.join(' ');\n        }\n    });\n\n    return elms.length === 1 ? elms[0] : elms;\n}\n\n\n// Exports\n// =============================================================================\nexport default addClass;\n","// Modules\n// =============================================================================\nimport { elementsToArray, classNamesToArray } from './util.js';\n\n\n// Functions\n// =============================================================================\n/**\n * Remove class name(s) from target element(s)\n *\n * @param {(array|element|htmlcollection|nodelist|string)} target -\n *   Element(s) to remove class name(s) from\n * @param {(array|function|string)} classNames - Array, space-separated list,\n *  or function that returns array/string of class name(s)\n * @returns {(array|element)} - Target(s)\n */\nfunction removeClass(target, classNames) {\n    const elms = elementsToArray(target);\n\n    elms.forEach(function(elm, i) {\n        const classArray = classNamesToArray(classNames instanceof Function ? classNames(elm, i) : classNames);\n\n        if (elm.className.trim().length && classArray && classArray.length) {\n            const elmClassArray   = elm.className.split(' ');\n            const finalClassArray = elmClassArray.filter(className => classArray.indexOf(className) === -1);\n\n            // Standardize result of setting empty \"class\" attribute.\n            // Internet Explorer and Edge automatically remove the \"class\"\n            // attribute when it is set to \"\". Other browsers (Chrome, Firefox,\n            // Safari) will set the attribute to \"\". The difference in these\n            // behaviors throws off unit tests, so the following code emulates\n            // IE/Edge behavior of removing the attribute when the value is \"\".\n            if (finalClassArray.length) {\n                elm.className = finalClassArray.join(' ');\n            }\n            else {\n                elm.removeAttribute('class');\n            }\n        }\n    });\n\n    return elms.length === 1 ? elms[0] : elms;\n}\n\n\n// Exports\n// =============================================================================\nexport default removeClass;\n","// Modules\n// =============================================================================\nimport add    from './add.js';\nimport remove from './remove.js';\nimport { elementsToArray, classNamesToArray } from './util.js';\n\n\n// Variables\n// =============================================================================\nconst classChange = { add, remove };\n\n\n// Functions\n// =============================================================================\n/**\n * Toggle class name(s) on target element(s)\n *\n * @param {(array|element|htmlcollection|nodelist|string)} target -\n *   Element(s) to toggle class name(s) on\n * @param {(array|function|string)} classNames - Array, space-separated list, or\n *   function that returns array/string of class name(s)\n * @param {boolean} [forceTrueFalse] - Force add when true, remove when false\n * @returns {(array|element)} - Target(s)\n */\nfunction toggleClass(target, classNames, forceTrueFalse) {\n    if (forceTrueFalse === true) {\n        return classChange.add(target, classNames);\n    }\n    else if (forceTrueFalse === false) {\n        return classChange.remove(target, classNames);\n    }\n    else {\n        const elms = elementsToArray(target);\n\n        elms.forEach(function(elm, i) {\n            const classArray = classNamesToArray(classNames instanceof Function ? classNames(elm, i) : classNames);\n\n            if (classArray && classArray.length) {\n                const elmClassArray   = elm.className.length ? elm.className.split(' ') : [];\n                const keepClassArray  = elmClassArray.filter(className => classArray.indexOf(className) === -1);\n                const newClassArray   = classArray.filter(className => elmClassArray.indexOf(className) === -1);\n                const finalClassArray = keepClassArray.concat(newClassArray);\n\n                elm.className = finalClassArray.join(' ');\n            }\n        });\n\n        return elms.length === 1 ? elms[0] : elms;\n    }\n}\n\n\n// Exports\n// =============================================================================\nexport default toggleClass;\n","// Modules\n// =============================================================================\nimport add    from './add.js';\nimport remove from './remove.js';\nimport toggle from './toggle.js';\nimport { elementsToArray, matchesSelector, getClosest, getParents } from './util.js';\n\n\n// Variables\n// =============================================================================\nconst classChange = { add, remove, toggle };\n\n\n// Functions\n// =============================================================================\n/**\n * Adds or removes click/tap event listener(s) on elements that have\n * data-class-* attributes and trigger associated method(s).\n *\n * @param {(array|element|htmlcollection|nodelist|string)} [listenerTarget=document]\n * @param {boolean} [addTrueRemoveFalse=true]\n */\nfunction addRemoveAttrListener(listenerTarget = document, addTrueRemoveFalse = true) {\n    // Allow boolean for listenerTarget\n    // true = add default listener, false = remove default listener\n    addTrueRemoveFalse = typeof(listenerTarget) === 'boolean' ? listenerTarget : addTrueRemoveFalse;\n    listenerTarget = typeof(listenerTarget) === 'boolean' ? document : listenerTarget;\n\n    const elms   = elementsToArray(listenerTarget);\n    const method = listenerTarget === false || addTrueRemoveFalse === false ? 'removeEventListener' : 'addEventListener';\n\n    elms.forEach(function(elm) {\n        elm[method]('click', handleAttrEvent);\n    });\n\n    // Return object containing remove method\n    return {\n        remove() {\n            elms.forEach(function(elm) {\n                elm.removeEventListener('click', handleAttrEvent);\n            });\n        }\n    };\n}\n\n/**\n * Handles click/tap events triggered via data-class-* attributes.\n *\n * @param {object} evt\n */\nfunction handleAttrEvent(evt) {\n    const elms          = [evt.target].concat(getParents(evt.target));\n    const matchSelector = '[data-class-add],[data-class-remove],[data-class-toggle]';\n    const methods       = ['add', 'remove', 'toggle'];\n\n    elms.forEach(function(elm) {\n        const hasAttr = matchesSelector(elm, matchSelector);\n\n        if (hasAttr) {\n            const changeTasks = {};\n\n            methods.forEach(function(method) {\n                const classNames = elm.getAttribute(`data-class-${method}`);\n\n                if (classNames && classNames.length) {\n                    const closestAttr  = elm.getAttribute(`data-class-${method}-closest`) || elm.getAttribute('data-class-closest');\n                    const parentsAttr  = elm.getAttribute(`data-class-${method}-parents`) || elm.getAttribute('data-class-parents');\n                    const siblingsAttr = elm.getAttribute(`data-class-${method}-siblings`) || elm.getAttribute('data-class-siblings');\n                    const targetAttr   = elm.getAttribute(`data-class-${method}-target`) || elm.getAttribute('data-class-target');\n\n                    let changeElms = [];\n\n                    if (closestAttr) {\n                        const elms = getClosest(elm, closestAttr);\n                        changeElms = changeElms.concat(elms);\n                    }\n                    if (parentsAttr) {\n                        const elms = getParents(elm, parentsAttr);\n                        changeElms = changeElms.concat(elms);\n                    }\n                    if (siblingsAttr) {\n                        const siblingElms = elementsToArray(elm.parentNode.children);\n\n                        siblingElms.forEach(function(siblingElm) {\n                            const isSibling = siblingElm !== elm;\n                            const isMatch   = matchesSelector(siblingElm, siblingsAttr);\n\n                            if (isSibling && isMatch) {\n                                changeElms.push(siblingElm);\n                            }\n                        });\n                    }\n                    if (targetAttr) {\n                        const elms = elementsToArray(document.querySelectorAll(targetAttr));\n                        changeElms = changeElms.concat(elms);\n                    }\n\n                    changeTasks[method] = {\n                        target: changeElms.length ? changeElms : elm,\n                        classNames\n                    };\n                }\n            });\n\n            methods.forEach(function(method) {\n                if (changeTasks[method]) {\n                    classChange[method](changeTasks[method].target, changeTasks[method].classNames);\n                }\n            });\n        }\n    });\n}\n\n\n// Exports\n// =============================================================================\nexport default addRemoveAttrListener;\n","// Modules\n// =============================================================================\nimport add    from './add.js';\nimport remove from './remove.js';\nimport toggle from './toggle.js';\nimport * as util from './util.js';\n\n\n// Variables\n// =============================================================================\nconst classChange = { add, remove, toggle };\n\n\n// Functions\n// =============================================================================\n/**\n * Adds classChange event listener(s) and returns a remove() method\n *\n * @param {object} options\n * @param {(array|element|htmlcollection|nodelist|string)} [options.target=document]\n * @param {string} [options.event=\"click\"]\n * @param {(array|boolean|element|function|htmlcollection|nodelist|string)} [options.match=true]\n * @param {(array|boolean|element|function|htmlcollection|nodelist|string)} [options.change=true]\n * @param {(array|function|string)} [options.add]\n * @param {(array|function|string)} [options.remove]\n * @param {(array|function|string)} [options.toggle]\n * @returns {object} Remove method\n */\nfunction addChangeListener(options) {\n    const settings = {\n        target: util.elementsToArray(options.target || document.body),\n        event : options.event  || 'click',\n        match : options.match  || true,\n        change: options.change || true,\n        add   : options.add    || null,\n        remove: options.remove || null,\n        toggle: options.toggle || null\n    };\n\n    function triggerChangeEvent(evt) {\n        handleChangeEvent(evt, settings);\n    }\n\n    settings.target.forEach(function(target) {\n        target.addEventListener(settings.event, triggerChangeEvent);\n    });\n\n    // Return object containing remove method\n    return {\n        remove() {\n            settings.target.forEach(function(target) {\n                target.removeEventListener(settings.event, triggerChangeEvent);\n            });\n        }\n    };\n}\n\n/**\n * Detects if an event matches the one defined in settings and changes class\n * names on elements accordingly\n *\n * @param {object} evt - Event object\n * @param {object} settings - Listener settings\n */\nfunction handleChangeEvent(evt, settings) {\n    let matchElms = settings.match instanceof Function ? settings.match(evt) : settings.match;\n    let matchedElm;\n\n    // Match: Event target\n    /* istanbul ignore else */\n    if (matchElms === true) {\n        matchElms  = [evt.target];\n        matchedElm = evt.target;\n    }\n    // Match: CSS selector\n    else if (typeof matchElms === 'string') {\n        const isMatch = util.matchesSelector(evt.target, matchElms);\n\n        matchedElm = isMatch ? evt.target : util.getParents(evt.target).filter(elm => util.matchesSelector(elm, matchElms))[0] || null;\n        matchElms  = util.elementsToArray(matchElms);\n    }\n    // Match: Array, Element, HTMLCollection, NodeList\n    else if (typeof matchElms === 'object') {\n        const isMatch = evt.target === matchElms;\n\n        matchElms  = util.elementsToArray(matchElms);\n        matchedElm = isMatch ? evt.target : matchElms[matchElms.indexOf(evt.target)] || util.getParents(evt.target).filter(elm => matchElms.indexOf(elm) !== -1)[0] || null;\n    }\n\n    // Change\n    if (matchedElm) {\n        const matchedElmIndex = matchElms.indexOf(matchedElm);\n        let   changeElms      = settings.change instanceof Function ? settings.change(evt, matchedElm, matchedElmIndex) : settings.change;\n\n        changeElms = changeElms === true ? [evt.target] : util.elementsToArray(changeElms);\n\n        ['toggle', 'remove', 'add'].forEach(changeType => {\n            // If settings value is a function, call for each element with args\n            if (settings[changeType] instanceof Function) {\n                changeElms.forEach((changeElm, changeElmIndex) => {\n                    const classNames = settings[changeType](evt, matchedElm, matchedElmIndex, changeElm, changeElmIndex);\n\n                    classChange[changeType](changeElm, classNames);\n                });\n            }\n            else {\n                const classNames = settings[changeType];\n\n                classChange[changeType](changeElms, classNames);\n            }\n        });\n    }\n}\n\n\n// Exports\n// =============================================================================\nexport default addChangeListener;\n","// Modules\n// =============================================================================\nimport add      from './add.js';\nimport attrs    from './attrs.js';\nimport listener from './listener.js';\nimport remove   from './remove.js';\nimport toggle   from './toggle.js';\n\n\n// Exports\n// =============================================================================\nexport default { add, attrs, listener, remove, toggle };\n"],"names":["classNamesToArray","classNames","trim","replace","split","Array","isArray","map","name","length","filter","Boolean","elementsToArray","elements","apply","document","querySelectorAll","window","HTMLCollection","NodeList","value","index","self","indexOf","getClosest","elm","matchSelector","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","matchedElm","testElm","call","parentNode","getParents","parentElms","push","selector","addClass","target","elms","forEach","i","classArray","Function","elmClassArray","className","newClassArray","finalClassArray","concat","join","removeClass","removeAttribute","classChange","add","remove","toggleClass","forceTrueFalse","keepClassArray","toggle","addRemoveAttrListener","listenerTarget","addTrueRemoveFalse","method","handleAttrEvent","removeEventListener","evt","methods","changeTasks","getAttribute","closestAttr","parentsAttr","siblingsAttr","targetAttr","changeElms","children","siblingElm","isSibling","isMatch","addChangeListener","options","settings","util","body","event","match","change","triggerChangeEvent","addEventListener","handleChangeEvent","matchElms","matchedElmIndex","changeType","changeElm","changeElmIndex","attrs","listener"],"mappings":"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"}