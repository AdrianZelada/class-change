{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///class-change.min.js","webpack:///webpack/bootstrap fd46efed53851d6df44e","webpack:///./src/index.js","webpack:///./src/util.js","webpack:///./src/add.js","webpack:///./src/remove.js","webpack:///./src/toggle.js","webpack:///./src/listener.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","add","listener","remove","toggle","classNamesToArray","classNames","trim","replace","split","Array","isArray","map","name","length","filter","Boolean","isIterableList","obj","isType","val","type","re","RegExp","toLowerCase","test","getType","Object","prototype","toString","slice","matchesSelector","elm","selector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","util","target","addClassNames","classList","forEach","className","elmClasses","indexOf","push","join","elms","document","querySelectorAll","i","len","Function","removeClassNames","index","classChange","forceTrueFalse","toggleClassNames","options","addListener","listenerTarget","changeType","evt","triggerChange","eventElm","matchElms","settings","match","changeElms","change","addEventListener","event","data","body","ctx","listeners","removeEventListener","currentTarget"],"mappings":"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","file":"class-change.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"classChange\"] = factory();\n\telse\n\t\troot[\"classChange\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"classChange\"] = factory();\n\telse\n\t\troot[\"classChange\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Modules\n\t// =============================================================================\n\tvar add      = __webpack_require__(2);\n\tvar listener = __webpack_require__(5);\n\tvar remove   = __webpack_require__(3);\n\tvar toggle   = __webpack_require__(4);\n\t\n\t// Exports\n\t// =============================================================================\n\tmodule.exports = {\n\t    add     : add,\n\t    listener: listener,\n\t    remove  : remove,\n\t    toggle  : toggle\n\t};\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t// Exports\n\t// =============================================================================\n\tmodule.exports = {\n\t    classNamesToArray: function(classNames) {\n\t        // String - Trim and convert to Array\n\t        if (typeof classNames === 'string') {\n\t            classNames = classNames.trim().replace(/\\s+/g, ' ').split(' ');\n\t        }\n\t\n\t        // Trim array items\n\t        if (Array.isArray(classNames)) {\n\t            classNames = classNames.map(function(name) {\n\t                return name && name.length ? name.trim() : null;\n\t            });\n\t\n\t            // Filter out \"falsey\" values\n\t            classNames = classNames.filter(Boolean);\n\t        }\n\t\n\t        return classNames;\n\t    },\n\t    // Returns true/false if \"obj\" is an Array or NodeList\n\t    isIterableList: function(obj) {\n\t        return this.isType(obj, 'array|nodelist');\n\t    },\n\t    // Returns true/false if type match\n\t    // Test multiple types using \"|\" as separator (Ex: \"type1|type2\")\n\t    isType: function(val, type) {\n\t        var re = new RegExp(type.toLowerCase());\n\t\n\t        return re.test(this.getType(val).toLowerCase());\n\t    },\n\t    // Returns specific JavaScript type (more specific than typeof)\n\t    getType: function(val) {\n\t        return Object.prototype.toString.call(val).slice(8,-1);\n\t    },\n\t    // Cross-browser wrapper for native \"matches\" method\n\t    matchesSelector: function(elm, selector) {\n\t        var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n\t        return matches.call(elm, selector);\n\t    }\n\t};\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Modules\n\t// =============================================================================\n\tvar util = __webpack_require__(1);\n\t\n\t// Exports\n\t// =============================================================================\n\tmodule.exports = function(target, classNames) {\n\t    elms = typeof target === 'string' ? document.querySelectorAll(target) : util.isIterableList(target) ? target : [target];\n\t\n\t    function addClassNames(elm, classNames) {\n\t        // Convert to array and trim values\n\t        classNames = util.classNamesToArray(classNames);\n\t\n\t        if (classNames && classNames.length) {\n\t            // Native\n\t            if (elm.classList) {\n\t                classNames.forEach(function(className) {\n\t                    elm.classList.add(className);\n\t                });\n\t            }\n\t            // Legacy\n\t            else {\n\t                var elmClasses = elm.className.split(' ');\n\t\n\t                classNames.forEach(function(className) {\n\t                    if (elmClasses.indexOf(className) === -1) {\n\t                        elmClasses.push(className);\n\t                    }\n\t                });\n\t\n\t                elm.className = elmClasses.join(' ');\n\t            }\n\t        }\n\t    }\n\t\n\t    for (var i = 0, len = elms.length; i < len; i++) {\n\t        if (classNames instanceof Function) {\n\t            addClassNames(elms[i], classNames(elms[i], i));\n\t        }\n\t        else {\n\t            addClassNames(elms[i], classNames);\n\t        }\n\t    }\n\t\n\t    return elms.length === 1 ? elms[0] : elms;\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Modules\n\t// =============================================================================\n\tvar util = __webpack_require__(1);\n\t\n\t// Exports\n\t// =============================================================================\n\tmodule.exports = function(target, classNames) {\n\t    elms = typeof target === 'string' ? document.querySelectorAll(target) : util.isIterableList(target) ? target : [target];\n\t\n\t    function removeClassNames(elm, classNames) {\n\t        // Convert to array and trim values\n\t        classNames = util.classNamesToArray(classNames);\n\t\n\t        if (classNames && classNames.length) {\n\t            // Native\n\t            if (elm.classList) {\n\t                classNames.forEach(function(className) {\n\t                    elm.classList.remove(className);\n\t                });\n\t            }\n\t            // Legacy\n\t            else {\n\t                var elmClasses = elm.className.split(' ');\n\t\n\t                classNames.forEach(function(className) {\n\t                    var index = elmClasses.indexOf(className);\n\t\n\t                    if (index > -1) {\n\t                        elmClasses[index] = '';\n\t                    }\n\t                });\n\t\n\t                elm.className = elmClasses.join(' ');\n\t            }\n\t        }\n\t    }\n\t\n\t    for (var i = 0, len = elms.length; i < len; i++) {\n\t        if (classNames instanceof Function) {\n\t            removeClassNames(elms[i], classNames(elms[i], i));\n\t        }\n\t        else {\n\t            removeClassNames(elms[i], classNames);\n\t        }\n\t    }\n\t\n\t    return elms.length === 1 ? elms[0] : elms;\n\t};\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Modules\n\t// =============================================================================\n\tvar classChange = {\n\t        add   : __webpack_require__(2),\n\t        remove: __webpack_require__(3)\n\t    };\n\tvar util = __webpack_require__(1);\n\t\n\t// Exports\n\t// =============================================================================\n\tmodule.exports = function(target, classNames, forceTrueFalse) {\n\t    elms = typeof target === 'string' ? document.querySelectorAll(target) : util.isIterableList(target) ? target : [target];\n\t    forceTrueFalse = forceTrueFalse || null;\n\t\n\t    function toggleClassNames(elm, classNames) {\n\t        // Convert to array and trim values\n\t        classNames = util.classNamesToArray(classNames);\n\t\n\t        if (classNames && classNames.length) {\n\t            // Native\n\t            if (elm.classList) {\n\t                classNames.forEach(function(className) {\n\t                    if (forceTrueFalse === true) {\n\t                        elm.classList.add(className);\n\t                    }\n\t                    else if (forceTrueFalse === false) {\n\t                        elm.classList.remove(className);\n\t                    }\n\t                    else {\n\t                        elm.classList.toggle(className);\n\t                    }\n\t                });\n\t            }\n\t            // Legacy\n\t            else {\n\t                var elmClasses = elm.className.split(' ');\n\t\n\t                classNames.forEach(function(className) {\n\t                    if (forceTrueFalse === false || (forceTrueFalse === null && elmClasses.indexOf(className) > -1)) {\n\t                        classChange.remove(elm, className);\n\t                    }\n\t                    else if (forceTrueFalse === true || (forceTrueFalse === null && elmClasses.indexOf(className) === -1)) {\n\t                        classChange.add(elm, className);\n\t                    }\n\t                });\n\t            }\n\t        }\n\t    }\n\t\n\t    for (var i = 0, len = elms.length; i < len; i++) {\n\t        if (classNames instanceof Function) {\n\t            toggleClassNames(elms[i], classNames(elms[i], i));\n\t        }\n\t        else {\n\t            toggleClassNames(elms[i], classNames);\n\t        }\n\t    }\n\t\n\t    return elms.length === 1 ? elms[0] : elms;\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Modules\n\t// =============================================================================\n\tvar classChange = {\n\t        add   : __webpack_require__(2),\n\t        remove: __webpack_require__(3),\n\t        toggle: __webpack_require__(4)\n\t    };\n\tvar util = __webpack_require__(1);\n\t\n\t// Exports\n\t// =============================================================================\n\tmodule.exports = function(options) {\n\t    var settings  = {\n\t        target : options.target  || document.body,\n\t        event  : options.event   || 'click',\n\t        match  : options.match   || null,\n\t        change : options.change  || null,\n\t        add    : options.add     || null,\n\t        remove : options.remove  || null,\n\t        toggle : options.toggle  || null\n\t    };\n\t\n\t    // Convert settings.target CSS selector to NodeList\n\t    if (typeof settings.target === 'string') {\n\t        settings.target = document.querySelectorAll(settings.target);\n\t    }\n\t\n\t    // Convert single element listener target to an array\n\t    // Allows for iterating over targets and adding event listeners\n\t    if (!util.isIterableList(settings.target)) {\n\t        settings.target = [settings.target];\n\t    }\n\t\n\t    // Functions\n\t    // -------------------------------------------------------------------------\n\t    // Add event listener\n\t    function addListener(listenerTarget, changeType) {\n\t        var listener = function(evt) {\n\t            var eventElm  = evt.target;\n\t            var matchElms = settings.match;\n\t            var triggerChange, i, len;\n\t\n\t            // If matchElms is a function, call the function and set matchElms\n\t            // to the return value.\n\t            if (matchElms instanceof Function) {\n\t                matchElms = matchElms(eventElm, evt);\n\t            }\n\t\n\t            // If matchElms is a CSS selector, trigger the class change event\n\t            // if the event.target matches the selector.\n\t            if (typeof matchElms === 'string') {\n\t                triggerChange = util.matchesSelector(eventElm, matchElms);\n\t\n\t                // If it's a match, convert the CSS selector to a NodeList.\n\t                if (triggerChange) {\n\t                    matchElms = listenerTarget.querySelectorAll(matchElms);\n\t                }\n\t            }\n\t\n\t            // If matchElms has not been specified, set matchElms to the\n\t            // event.target and trigger the change.\n\t            if (matchElms === null) {\n\t                matchElms = eventElm;\n\t                triggerChange = true;\n\t            }\n\t            // If matchElms is an iterable object, loop over the items\n\t            // and check if the event.target trigger the event if it is part of\n\t            // the collection.\n\t            else if (util.isIterableList(matchElms)) {\n\t                for (i = 0, len = matchElms.length; i < len; i++) {\n\t                    if (eventElm === matchElms[i]) {\n\t                        triggerChange = true;\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            // If matchElms is an non-iterable object, trigger the\n\t            // class change event if the event.target is the object.\n\t            else if (typeof matchElms === 'object') {\n\t                triggerChange = eventElm === matchElms;\n\t            }\n\t\n\t            // Trigger the class change event\n\t            if (triggerChange) {\n\t                // Set the elements to receive the class change to either\n\t                // those specified by settings.change or the event.target\n\t                var changeElms = settings.change || eventElm;\n\t\n\t                // If changeElms is a function, call the function and set\n\t                // changeElms to the return value.\n\t                if (changeElms instanceof Function) {\n\t                    var index = null;\n\t\n\t                    // Get index of the event.target within the collection of\n\t                    // matched elements to pass to function as argument.\n\t                    if (matchElms) {\n\t                        if (util.isIterableList(matchElms)) {\n\t                            for (i = 0, len = matchElms.length; i < len; i++) {\n\t                                if (eventElm === matchElms[i]) {\n\t                                    index = i;\n\t                                    break;\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t\n\t                    // Call change function\n\t                    // Pass the event.target, the event object and the index\n\t                    // of the matched element within the matchElms collection.\n\t                    changeElms = changeElms(eventElm, evt, index);\n\t                }\n\t\n\t                // If changeElms is a CSS selector convert it to a NodeList\n\t                if (typeof changeElms === 'string') {\n\t                    changeElms = document.querySelectorAll(changeElms);\n\t                }\n\t\n\t                // Convert changeElms to an iterable object if necessary\n\t                if (!util.isIterableList(changeElms)) {\n\t                    changeElms = [changeElms];\n\t                }\n\t\n\t                // If the [add/remove/toggle] value is a function, call the\n\t                // function once for every item in changeElms.\n\t                if (settings[changeType] instanceof Function) {\n\t                    for (i = 0, len = changeElms.length; i < len; i++) {\n\t                        // Each time the function is called, pass the\n\t                        // event.target, a changeElms item, and the index of\n\t                        // the item within the changeElms collection.\n\t                        var classNames = settings[changeType](eventElm, evt, changeElms[i], i);\n\t\n\t                        // Now that we have the return value of the\n\t                        // [add/remove/toggle] function, pass the class names\n\t                        // to corresponding classChange method.\n\t                        classChange[changeType](changeElms[i], classNames);\n\t                    }\n\t                }\n\t                else {\n\t                    // Change class names (add/remove/toggle)\n\t                    classChange[changeType](changeElms, settings[changeType]);\n\t                }\n\t            }\n\t        };\n\t\n\t        // Add event listener\n\t        listenerTarget.addEventListener(settings.event, listener);\n\t\n\t        // Store target, event type and listener reference\n\t        var data = {\n\t            target  : listenerTarget,\n\t            event   : settings.event,\n\t            match   : settings.match,\n\t            change  : settings.change,\n\t            listener: listener\n\t        };\n\t\n\t        data[changeType] = settings[changeType];\n\t\n\t        // Return stored reference\n\t        return data;\n\t    }\n\t\n\t    // Data & Methods\n\t    // -------------------------------------------------------------------------\n\t    var ctx = {\n\t        listeners: [],\n\t        remove: function remove() {\n\t            for (var i = 0, len = this.listeners.length; i < len; i++) {\n\t                var settings = this.listeners[i];\n\t\n\t                settings.target.removeEventListener(settings.event, settings.listener);\n\t            }\n\t        }\n\t    };\n\t\n\t    // Main\n\t    // -------------------------------------------------------------------------\n\t    // Loop through event listener targets\n\t    for (var i = 0, len = settings.target.length; i < len; i++) {\n\t        var currentTarget = settings.target[i];\n\t\n\t        // Loop through class lists\n\t        ['toggle', 'remove', 'add'].forEach(function(changeType) {\n\t            if (settings[changeType]) {\n\t                // Add event listener\n\t                var listener = addListener(currentTarget, changeType);\n\t\n\t                // Push listener reference\n\t                ctx.listeners.push(listener);\n\t            }\n\t        });\n\t    }\n\t\n\t    // Return Data & Methods\n\t    // -------------------------------------------------------------------------\n\t    return ctx;\n\t};\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** class-change.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap fd46efed53851d6df44e\n **/","// Modules\n// =============================================================================\nvar add      = require('./add');\nvar listener = require('./listener');\nvar remove   = require('./remove');\nvar toggle   = require('./toggle');\n\n// Exports\n// =============================================================================\nmodule.exports = {\n    add     : add,\n    listener: listener,\n    remove  : remove,\n    toggle  : toggle\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","// Exports\n// =============================================================================\nmodule.exports = {\n    classNamesToArray: function(classNames) {\n        // String - Trim and convert to Array\n        if (typeof classNames === 'string') {\n            classNames = classNames.trim().replace(/\\s+/g, ' ').split(' ');\n        }\n\n        // Trim array items\n        if (Array.isArray(classNames)) {\n            classNames = classNames.map(function(name) {\n                return name && name.length ? name.trim() : null;\n            });\n\n            // Filter out \"falsey\" values\n            classNames = classNames.filter(Boolean);\n        }\n\n        return classNames;\n    },\n    // Returns true/false if \"obj\" is an Array or NodeList\n    isIterableList: function(obj) {\n        return this.isType(obj, 'array|nodelist');\n    },\n    // Returns true/false if type match\n    // Test multiple types using \"|\" as separator (Ex: \"type1|type2\")\n    isType: function(val, type) {\n        var re = new RegExp(type.toLowerCase());\n\n        return re.test(this.getType(val).toLowerCase());\n    },\n    // Returns specific JavaScript type (more specific than typeof)\n    getType: function(val) {\n        return Object.prototype.toString.call(val).slice(8,-1);\n    },\n    // Cross-browser wrapper for native \"matches\" method\n    matchesSelector: function(elm, selector) {\n        var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n        return matches.call(elm, selector);\n    }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/util.js\n ** module id = 1\n ** module chunks = 0\n **/","// Modules\n// =============================================================================\nvar util = require('./util');\n\n// Exports\n// =============================================================================\nmodule.exports = function(target, classNames) {\n    elms = typeof target === 'string' ? document.querySelectorAll(target) : util.isIterableList(target) ? target : [target];\n\n    function addClassNames(elm, classNames) {\n        // Convert to array and trim values\n        classNames = util.classNamesToArray(classNames);\n\n        if (classNames && classNames.length) {\n            // Native\n            if (elm.classList) {\n                classNames.forEach(function(className) {\n                    elm.classList.add(className);\n                });\n            }\n            // Legacy\n            else {\n                var elmClasses = elm.className.split(' ');\n\n                classNames.forEach(function(className) {\n                    if (elmClasses.indexOf(className) === -1) {\n                        elmClasses.push(className);\n                    }\n                });\n\n                elm.className = elmClasses.join(' ');\n            }\n        }\n    }\n\n    for (var i = 0, len = elms.length; i < len; i++) {\n        if (classNames instanceof Function) {\n            addClassNames(elms[i], classNames(elms[i], i));\n        }\n        else {\n            addClassNames(elms[i], classNames);\n        }\n    }\n\n    return elms.length === 1 ? elms[0] : elms;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/add.js\n ** module id = 2\n ** module chunks = 0\n **/","// Modules\n// =============================================================================\nvar util = require('./util');\n\n// Exports\n// =============================================================================\nmodule.exports = function(target, classNames) {\n    elms = typeof target === 'string' ? document.querySelectorAll(target) : util.isIterableList(target) ? target : [target];\n\n    function removeClassNames(elm, classNames) {\n        // Convert to array and trim values\n        classNames = util.classNamesToArray(classNames);\n\n        if (classNames && classNames.length) {\n            // Native\n            if (elm.classList) {\n                classNames.forEach(function(className) {\n                    elm.classList.remove(className);\n                });\n            }\n            // Legacy\n            else {\n                var elmClasses = elm.className.split(' ');\n\n                classNames.forEach(function(className) {\n                    var index = elmClasses.indexOf(className);\n\n                    if (index > -1) {\n                        elmClasses[index] = '';\n                    }\n                });\n\n                elm.className = elmClasses.join(' ');\n            }\n        }\n    }\n\n    for (var i = 0, len = elms.length; i < len; i++) {\n        if (classNames instanceof Function) {\n            removeClassNames(elms[i], classNames(elms[i], i));\n        }\n        else {\n            removeClassNames(elms[i], classNames);\n        }\n    }\n\n    return elms.length === 1 ? elms[0] : elms;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/remove.js\n ** module id = 3\n ** module chunks = 0\n **/","// Modules\n// =============================================================================\nvar classChange = {\n        add   : require('./add'),\n        remove: require('./remove')\n    };\nvar util = require('./util');\n\n// Exports\n// =============================================================================\nmodule.exports = function(target, classNames, forceTrueFalse) {\n    elms = typeof target === 'string' ? document.querySelectorAll(target) : util.isIterableList(target) ? target : [target];\n    forceTrueFalse = forceTrueFalse || null;\n\n    function toggleClassNames(elm, classNames) {\n        // Convert to array and trim values\n        classNames = util.classNamesToArray(classNames);\n\n        if (classNames && classNames.length) {\n            // Native\n            if (elm.classList) {\n                classNames.forEach(function(className) {\n                    if (forceTrueFalse === true) {\n                        elm.classList.add(className);\n                    }\n                    else if (forceTrueFalse === false) {\n                        elm.classList.remove(className);\n                    }\n                    else {\n                        elm.classList.toggle(className);\n                    }\n                });\n            }\n            // Legacy\n            else {\n                var elmClasses = elm.className.split(' ');\n\n                classNames.forEach(function(className) {\n                    if (forceTrueFalse === false || (forceTrueFalse === null && elmClasses.indexOf(className) > -1)) {\n                        classChange.remove(elm, className);\n                    }\n                    else if (forceTrueFalse === true || (forceTrueFalse === null && elmClasses.indexOf(className) === -1)) {\n                        classChange.add(elm, className);\n                    }\n                });\n            }\n        }\n    }\n\n    for (var i = 0, len = elms.length; i < len; i++) {\n        if (classNames instanceof Function) {\n            toggleClassNames(elms[i], classNames(elms[i], i));\n        }\n        else {\n            toggleClassNames(elms[i], classNames);\n        }\n    }\n\n    return elms.length === 1 ? elms[0] : elms;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/toggle.js\n ** module id = 4\n ** module chunks = 0\n **/","// Modules\n// =============================================================================\nvar classChange = {\n        add   : require('./add'),\n        remove: require('./remove'),\n        toggle: require('./toggle')\n    };\nvar util = require('./util');\n\n// Exports\n// =============================================================================\nmodule.exports = function(options) {\n    var settings  = {\n        target : options.target  || document.body,\n        event  : options.event   || 'click',\n        match  : options.match   || null,\n        change : options.change  || null,\n        add    : options.add     || null,\n        remove : options.remove  || null,\n        toggle : options.toggle  || null\n    };\n\n    // Convert settings.target CSS selector to NodeList\n    if (typeof settings.target === 'string') {\n        settings.target = document.querySelectorAll(settings.target);\n    }\n\n    // Convert single element listener target to an array\n    // Allows for iterating over targets and adding event listeners\n    if (!util.isIterableList(settings.target)) {\n        settings.target = [settings.target];\n    }\n\n    // Functions\n    // -------------------------------------------------------------------------\n    // Add event listener\n    function addListener(listenerTarget, changeType) {\n        var listener = function(evt) {\n            var eventElm  = evt.target;\n            var matchElms = settings.match;\n            var triggerChange, i, len;\n\n            // If matchElms is a function, call the function and set matchElms\n            // to the return value.\n            if (matchElms instanceof Function) {\n                matchElms = matchElms(eventElm, evt);\n            }\n\n            // If matchElms is a CSS selector, trigger the class change event\n            // if the event.target matches the selector.\n            if (typeof matchElms === 'string') {\n                triggerChange = util.matchesSelector(eventElm, matchElms);\n\n                // If it's a match, convert the CSS selector to a NodeList.\n                if (triggerChange) {\n                    matchElms = listenerTarget.querySelectorAll(matchElms);\n                }\n            }\n\n            // If matchElms has not been specified, set matchElms to the\n            // event.target and trigger the change.\n            if (matchElms === null) {\n                matchElms = eventElm;\n                triggerChange = true;\n            }\n            // If matchElms is an iterable object, loop over the items\n            // and check if the event.target trigger the event if it is part of\n            // the collection.\n            else if (util.isIterableList(matchElms)) {\n                for (i = 0, len = matchElms.length; i < len; i++) {\n                    if (eventElm === matchElms[i]) {\n                        triggerChange = true;\n                        break;\n                    }\n                }\n            }\n            // If matchElms is an non-iterable object, trigger the\n            // class change event if the event.target is the object.\n            else if (typeof matchElms === 'object') {\n                triggerChange = eventElm === matchElms;\n            }\n\n            // Trigger the class change event\n            if (triggerChange) {\n                // Set the elements to receive the class change to either\n                // those specified by settings.change or the event.target\n                var changeElms = settings.change || eventElm;\n\n                // If changeElms is a function, call the function and set\n                // changeElms to the return value.\n                if (changeElms instanceof Function) {\n                    var index = null;\n\n                    // Get index of the event.target within the collection of\n                    // matched elements to pass to function as argument.\n                    if (matchElms) {\n                        if (util.isIterableList(matchElms)) {\n                            for (i = 0, len = matchElms.length; i < len; i++) {\n                                if (eventElm === matchElms[i]) {\n                                    index = i;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    // Call change function\n                    // Pass the event.target, the event object and the index\n                    // of the matched element within the matchElms collection.\n                    changeElms = changeElms(eventElm, evt, index);\n                }\n\n                // If changeElms is a CSS selector convert it to a NodeList\n                if (typeof changeElms === 'string') {\n                    changeElms = document.querySelectorAll(changeElms);\n                }\n\n                // Convert changeElms to an iterable object if necessary\n                if (!util.isIterableList(changeElms)) {\n                    changeElms = [changeElms];\n                }\n\n                // If the [add/remove/toggle] value is a function, call the\n                // function once for every item in changeElms.\n                if (settings[changeType] instanceof Function) {\n                    for (i = 0, len = changeElms.length; i < len; i++) {\n                        // Each time the function is called, pass the\n                        // event.target, a changeElms item, and the index of\n                        // the item within the changeElms collection.\n                        var classNames = settings[changeType](eventElm, evt, changeElms[i], i);\n\n                        // Now that we have the return value of the\n                        // [add/remove/toggle] function, pass the class names\n                        // to corresponding classChange method.\n                        classChange[changeType](changeElms[i], classNames);\n                    }\n                }\n                else {\n                    // Change class names (add/remove/toggle)\n                    classChange[changeType](changeElms, settings[changeType]);\n                }\n            }\n        };\n\n        // Add event listener\n        listenerTarget.addEventListener(settings.event, listener);\n\n        // Store target, event type and listener reference\n        var data = {\n            target  : listenerTarget,\n            event   : settings.event,\n            match   : settings.match,\n            change  : settings.change,\n            listener: listener\n        };\n\n        data[changeType] = settings[changeType];\n\n        // Return stored reference\n        return data;\n    }\n\n    // Data & Methods\n    // -------------------------------------------------------------------------\n    var ctx = {\n        listeners: [],\n        remove: function remove() {\n            for (var i = 0, len = this.listeners.length; i < len; i++) {\n                var settings = this.listeners[i];\n\n                settings.target.removeEventListener(settings.event, settings.listener);\n            }\n        }\n    };\n\n    // Main\n    // -------------------------------------------------------------------------\n    // Loop through event listener targets\n    for (var i = 0, len = settings.target.length; i < len; i++) {\n        var currentTarget = settings.target[i];\n\n        // Loop through class lists\n        ['toggle', 'remove', 'add'].forEach(function(changeType) {\n            if (settings[changeType]) {\n                // Add event listener\n                var listener = addListener(currentTarget, changeType);\n\n                // Push listener reference\n                ctx.listeners.push(listener);\n            }\n        });\n    }\n\n    // Return Data & Methods\n    // -------------------------------------------------------------------------\n    return ctx;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/listener.js\n ** module id = 5\n ** module chunks = 0\n **/"],"sourceRoot":""}